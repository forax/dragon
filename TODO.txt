TODOs
- add an assert() function by default and add unit tests

- add support of lambdas
  - add a visitor that recognize free variables
  - add a way to create a Fun from a Fun and values for free variables
    (if there are no free variables the returned Fun should be the same)

- implement the correct semantics for 'if' and 'while'
  examples:
    if(2 == 3
       (
         a = 3
       )
       ()
    )
    // here a = null (undefined)
    
    while(2 == 3
      a = 3
    )
    // here a = null (undefined)

- replace null by undefined, a singleton value with a frozen virtual dictionary
  - convert from undefined to null and vice-versa when calling Java 

- add support for varargs in dragon
  example:
    def(foo: \a, rest* ->
      "here rest is an array containing 2 and 3"
    )
    foo(1, 2, 3)

- add function struct() (written in dragon) that allows to create a user defined data structure

- add samples with the main data structures in a folder inside samples
  linked list, hash map, etc.
  
- enhance Java support
  - add a way to convert a Fun into a functional interface (parameter) and a functional interface to a Fun (return)  
  
- add a compiler that generates Java bytecodes
  - tiered mode: at runtime if the interpreter detects that a function is hot
    - the compilation should occur offline
  - ahead of time mode: produce a jar containing all the classes of the dragon.jar + the classes
    generated by the compiler into a single fat jar
    
